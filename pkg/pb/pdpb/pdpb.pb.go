// Code generated by protoc-gen-gogo.
// source: pdpb.proto
// DO NOT EDIT!

/*
	Package pdpb is a generated protocol buffer package.

	It is generated from these files:
		pdpb.proto

	It has these top-level messages:
		ChangePeer
		Leader
		LeaderReq
		LeaderRsp
		GetClusterIDReq
		GetClusterIDRsp
		AllocIDReq
		AllocIDRsp
		IsClusterBootstrapReq
		IsClusterBootstrapRsp
		BootstrapClusterReq
		BootstrapClusterRsp
		CellHeartbeatReq
		CellHeartbeatRsp
*/
package pdpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import metapb "github.com/deepfabric/elasticell/pkg/pb/metapb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConfChangeType int32

const (
	ConfChangeType_AddNode    ConfChangeType = 0
	ConfChangeType_RemoveNode ConfChangeType = 1
)

var ConfChangeType_name = map[int32]string{
	0: "AddNode",
	1: "RemoveNode",
}
var ConfChangeType_value = map[string]int32{
	"AddNode":    0,
	"RemoveNode": 1,
}

func (x ConfChangeType) Enum() *ConfChangeType {
	p := new(ConfChangeType)
	*p = x
	return p
}
func (x ConfChangeType) String() string {
	return proto.EnumName(ConfChangeType_name, int32(x))
}
func (x *ConfChangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConfChangeType_value, data, "ConfChangeType")
	if err != nil {
		return err
	}
	*x = ConfChangeType(value)
	return nil
}
func (ConfChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{0} }

type ChangePeer struct {
	Type             ConfChangeType `protobuf:"varint,1,opt,name=type,enum=pdpb.ConfChangeType" json:"type"`
	Peer             *metapb.Peer   `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ChangePeer) Reset()                    { *m = ChangePeer{} }
func (m *ChangePeer) String() string            { return proto.CompactTextString(m) }
func (*ChangePeer) ProtoMessage()               {}
func (*ChangePeer) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{0} }

func (m *ChangePeer) GetType() ConfChangeType {
	if m != nil {
		return m.Type
	}
	return ConfChangeType_AddNode
}

func (m *ChangePeer) GetPeer() *metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type Leader struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name"`
	Addr             string `protobuf:"bytes,3,opt,name=addr" json:"addr"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Leader) Reset()                    { *m = Leader{} }
func (m *Leader) String() string            { return proto.CompactTextString(m) }
func (*Leader) ProtoMessage()               {}
func (*Leader) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{1} }

func (m *Leader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Leader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Leader) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type LeaderReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeaderReq) Reset()                    { *m = LeaderReq{} }
func (m *LeaderReq) String() string            { return proto.CompactTextString(m) }
func (*LeaderReq) ProtoMessage()               {}
func (*LeaderReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{2} }

func (m *LeaderReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *LeaderReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LeaderRsp struct {
	Leader           Leader `protobuf:"bytes,1,opt,name=leader" json:"leader"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LeaderRsp) Reset()                    { *m = LeaderRsp{} }
func (m *LeaderRsp) String() string            { return proto.CompactTextString(m) }
func (*LeaderRsp) ProtoMessage()               {}
func (*LeaderRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{3} }

func (m *LeaderRsp) GetLeader() Leader {
	if m != nil {
		return m.Leader
	}
	return Leader{}
}

type GetClusterIDReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetClusterIDReq) Reset()                    { *m = GetClusterIDReq{} }
func (m *GetClusterIDReq) String() string            { return proto.CompactTextString(m) }
func (*GetClusterIDReq) ProtoMessage()               {}
func (*GetClusterIDReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{4} }

func (m *GetClusterIDReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *GetClusterIDReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetClusterIDRsp struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetClusterIDRsp) Reset()                    { *m = GetClusterIDRsp{} }
func (m *GetClusterIDRsp) String() string            { return proto.CompactTextString(m) }
func (*GetClusterIDRsp) ProtoMessage()               {}
func (*GetClusterIDRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{5} }

func (m *GetClusterIDRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AllocIDReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AllocIDReq) Reset()                    { *m = AllocIDReq{} }
func (m *AllocIDReq) String() string            { return proto.CompactTextString(m) }
func (*AllocIDReq) ProtoMessage()               {}
func (*AllocIDReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{6} }

func (m *AllocIDReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AllocIDReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AllocIDRsp struct {
	Id               uint64 `protobuf:"varint,1,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AllocIDRsp) Reset()                    { *m = AllocIDRsp{} }
func (m *AllocIDRsp) String() string            { return proto.CompactTextString(m) }
func (*AllocIDRsp) ProtoMessage()               {}
func (*AllocIDRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{7} }

func (m *AllocIDRsp) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IsClusterBootstrapReq struct {
	From             string `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64 `protobuf:"varint,2,opt,name=id" json:"id"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsClusterBootstrapReq) Reset()                    { *m = IsClusterBootstrapReq{} }
func (m *IsClusterBootstrapReq) String() string            { return proto.CompactTextString(m) }
func (*IsClusterBootstrapReq) ProtoMessage()               {}
func (*IsClusterBootstrapReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{8} }

func (m *IsClusterBootstrapReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *IsClusterBootstrapReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IsClusterBootstrapRsp struct {
	Value            bool   `protobuf:"varint,1,opt,name=value" json:"value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *IsClusterBootstrapRsp) Reset()                    { *m = IsClusterBootstrapRsp{} }
func (m *IsClusterBootstrapRsp) String() string            { return proto.CompactTextString(m) }
func (*IsClusterBootstrapRsp) ProtoMessage()               {}
func (*IsClusterBootstrapRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{9} }

func (m *IsClusterBootstrapRsp) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type BootstrapClusterReq struct {
	From             string       `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64       `protobuf:"varint,2,opt,name=id" json:"id"`
	Store            metapb.Store `protobuf:"bytes,3,opt,name=store" json:"store"`
	Cell             metapb.Cell  `protobuf:"bytes,4,opt,name=cell" json:"cell"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *BootstrapClusterReq) Reset()                    { *m = BootstrapClusterReq{} }
func (m *BootstrapClusterReq) String() string            { return proto.CompactTextString(m) }
func (*BootstrapClusterReq) ProtoMessage()               {}
func (*BootstrapClusterReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{10} }

func (m *BootstrapClusterReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *BootstrapClusterReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BootstrapClusterReq) GetStore() metapb.Store {
	if m != nil {
		return m.Store
	}
	return metapb.Store{}
}

func (m *BootstrapClusterReq) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

type BootstrapClusterRsp struct {
	AlreadyBootstrapped bool   `protobuf:"varint,1,opt,name=alreadyBootstrapped" json:"alreadyBootstrapped"`
	XXX_unrecognized    []byte `json:"-"`
}

func (m *BootstrapClusterRsp) Reset()                    { *m = BootstrapClusterRsp{} }
func (m *BootstrapClusterRsp) String() string            { return proto.CompactTextString(m) }
func (*BootstrapClusterRsp) ProtoMessage()               {}
func (*BootstrapClusterRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{11} }

func (m *BootstrapClusterRsp) GetAlreadyBootstrapped() bool {
	if m != nil {
		return m.AlreadyBootstrapped
	}
	return false
}

type CellHeartbeatReq struct {
	From             string       `protobuf:"bytes,1,opt,name=from" json:"from"`
	Id               uint64       `protobuf:"varint,2,opt,name=id" json:"id"`
	Cell             metapb.Cell  `protobuf:"bytes,3,opt,name=cell" json:"cell"`
	Leader           *metapb.Peer `protobuf:"bytes,4,opt,name=leader" json:"leader,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CellHeartbeatReq) Reset()                    { *m = CellHeartbeatReq{} }
func (m *CellHeartbeatReq) String() string            { return proto.CompactTextString(m) }
func (*CellHeartbeatReq) ProtoMessage()               {}
func (*CellHeartbeatReq) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{12} }

func (m *CellHeartbeatReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CellHeartbeatReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CellHeartbeatReq) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

func (m *CellHeartbeatReq) GetLeader() *metapb.Peer {
	if m != nil {
		return m.Leader
	}
	return nil
}

type CellHeartbeatRsp struct {
	ChangePeer       ChangePeer `protobuf:"bytes,1,opt,name=changePeer" json:"changePeer"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CellHeartbeatRsp) Reset()                    { *m = CellHeartbeatRsp{} }
func (m *CellHeartbeatRsp) String() string            { return proto.CompactTextString(m) }
func (*CellHeartbeatRsp) ProtoMessage()               {}
func (*CellHeartbeatRsp) Descriptor() ([]byte, []int) { return fileDescriptorPdpb, []int{13} }

func (m *CellHeartbeatRsp) GetChangePeer() ChangePeer {
	if m != nil {
		return m.ChangePeer
	}
	return ChangePeer{}
}

func init() {
	proto.RegisterType((*ChangePeer)(nil), "pdpb.ChangePeer")
	proto.RegisterType((*Leader)(nil), "pdpb.Leader")
	proto.RegisterType((*LeaderReq)(nil), "pdpb.LeaderReq")
	proto.RegisterType((*LeaderRsp)(nil), "pdpb.LeaderRsp")
	proto.RegisterType((*GetClusterIDReq)(nil), "pdpb.GetClusterIDReq")
	proto.RegisterType((*GetClusterIDRsp)(nil), "pdpb.GetClusterIDRsp")
	proto.RegisterType((*AllocIDReq)(nil), "pdpb.AllocIDReq")
	proto.RegisterType((*AllocIDRsp)(nil), "pdpb.AllocIDRsp")
	proto.RegisterType((*IsClusterBootstrapReq)(nil), "pdpb.IsClusterBootstrapReq")
	proto.RegisterType((*IsClusterBootstrapRsp)(nil), "pdpb.IsClusterBootstrapRsp")
	proto.RegisterType((*BootstrapClusterReq)(nil), "pdpb.BootstrapClusterReq")
	proto.RegisterType((*BootstrapClusterRsp)(nil), "pdpb.BootstrapClusterRsp")
	proto.RegisterType((*CellHeartbeatReq)(nil), "pdpb.CellHeartbeatReq")
	proto.RegisterType((*CellHeartbeatRsp)(nil), "pdpb.CellHeartbeatRsp")
	proto.RegisterEnum("pdpb.ConfChangeType", ConfChangeType_name, ConfChangeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PDService service

type PDServiceClient interface {
	GetLeader(ctx context.Context, in *LeaderReq, opts ...grpc.CallOption) (*LeaderRsp, error)
	AllocID(ctx context.Context, in *AllocIDReq, opts ...grpc.CallOption) (*AllocIDRsp, error)
	GetClusterID(ctx context.Context, in *GetClusterIDReq, opts ...grpc.CallOption) (*GetClusterIDRsp, error)
	IsClusterBootstrap(ctx context.Context, in *IsClusterBootstrapReq, opts ...grpc.CallOption) (*IsClusterBootstrapRsp, error)
	BootstrapCluster(ctx context.Context, in *BootstrapClusterReq, opts ...grpc.CallOption) (*BootstrapClusterRsp, error)
	CellHeartbeat(ctx context.Context, in *CellHeartbeatReq, opts ...grpc.CallOption) (*CellHeartbeatRsp, error)
}

type pDServiceClient struct {
	cc *grpc.ClientConn
}

func NewPDServiceClient(cc *grpc.ClientConn) PDServiceClient {
	return &pDServiceClient{cc}
}

func (c *pDServiceClient) GetLeader(ctx context.Context, in *LeaderReq, opts ...grpc.CallOption) (*LeaderRsp, error) {
	out := new(LeaderRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) AllocID(ctx context.Context, in *AllocIDReq, opts ...grpc.CallOption) (*AllocIDRsp, error) {
	out := new(AllocIDRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/AllocID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) GetClusterID(ctx context.Context, in *GetClusterIDReq, opts ...grpc.CallOption) (*GetClusterIDRsp, error) {
	out := new(GetClusterIDRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/GetClusterID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) IsClusterBootstrap(ctx context.Context, in *IsClusterBootstrapReq, opts ...grpc.CallOption) (*IsClusterBootstrapRsp, error) {
	out := new(IsClusterBootstrapRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/IsClusterBootstrap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) BootstrapCluster(ctx context.Context, in *BootstrapClusterReq, opts ...grpc.CallOption) (*BootstrapClusterRsp, error) {
	out := new(BootstrapClusterRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/BootstrapCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDServiceClient) CellHeartbeat(ctx context.Context, in *CellHeartbeatReq, opts ...grpc.CallOption) (*CellHeartbeatRsp, error) {
	out := new(CellHeartbeatRsp)
	err := grpc.Invoke(ctx, "/pdpb.PDService/CellHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PDService service

type PDServiceServer interface {
	GetLeader(context.Context, *LeaderReq) (*LeaderRsp, error)
	AllocID(context.Context, *AllocIDReq) (*AllocIDRsp, error)
	GetClusterID(context.Context, *GetClusterIDReq) (*GetClusterIDRsp, error)
	IsClusterBootstrap(context.Context, *IsClusterBootstrapReq) (*IsClusterBootstrapRsp, error)
	BootstrapCluster(context.Context, *BootstrapClusterReq) (*BootstrapClusterRsp, error)
	CellHeartbeat(context.Context, *CellHeartbeatReq) (*CellHeartbeatRsp, error)
}

func RegisterPDServiceServer(s *grpc.Server, srv PDServiceServer) {
	s.RegisterService(&_PDService_serviceDesc, srv)
}

func _PDService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetLeader(ctx, req.(*LeaderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_AllocID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).AllocID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/AllocID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).AllocID(ctx, req.(*AllocIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_GetClusterID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).GetClusterID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/GetClusterID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).GetClusterID(ctx, req.(*GetClusterIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_IsClusterBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClusterBootstrapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).IsClusterBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/IsClusterBootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).IsClusterBootstrap(ctx, req.(*IsClusterBootstrapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_BootstrapCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).BootstrapCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/BootstrapCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).BootstrapCluster(ctx, req.(*BootstrapClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDService_CellHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellHeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDServiceServer).CellHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdpb.PDService/CellHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDServiceServer).CellHeartbeat(ctx, req.(*CellHeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdpb.PDService",
	HandlerType: (*PDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _PDService_GetLeader_Handler,
		},
		{
			MethodName: "AllocID",
			Handler:    _PDService_AllocID_Handler,
		},
		{
			MethodName: "GetClusterID",
			Handler:    _PDService_GetClusterID_Handler,
		},
		{
			MethodName: "IsClusterBootstrap",
			Handler:    _PDService_IsClusterBootstrap_Handler,
		},
		{
			MethodName: "BootstrapCluster",
			Handler:    _PDService_BootstrapCluster_Handler,
		},
		{
			MethodName: "CellHeartbeat",
			Handler:    _PDService_CellHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdpb.proto",
}

func (m *ChangePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Type))
	if m.Peer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.Peer.Size()))
		n1, err := m.Peer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Leader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Leader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.Addr)))
	i += copy(dAtA[i:], m.Addr)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaderRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Leader.Size()))
	n2, err := m.Leader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetClusterIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllocIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AllocIDRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocIDRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsClusterBootstrapReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsClusterBootstrapReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsClusterBootstrapRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsClusterBootstrapRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Value {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BootstrapClusterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapClusterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Store.Size()))
	n3, err := m.Store.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n4, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BootstrapClusterRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapClusterRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.AlreadyBootstrapped {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CellHeartbeatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellHeartbeatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.Cell.Size()))
	n5, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.Leader != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPdpb(dAtA, i, uint64(m.Leader.Size()))
		n6, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CellHeartbeatRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellHeartbeatRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPdpb(dAtA, i, uint64(m.ChangePeer.Size()))
	n7, err := m.ChangePeer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Pdpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pdpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPdpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChangePeer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.Type))
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Leader) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.Id))
	l = len(m.Name)
	n += 1 + l + sovPdpb(uint64(l))
	l = len(m.Addr)
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaderReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaderRsp) Size() (n int) {
	var l int
	_ = l
	l = m.Leader.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetClusterIDRsp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocIDReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllocIDRsp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsClusterBootstrapReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsClusterBootstrapRsp) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BootstrapClusterReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	l = m.Store.Size()
	n += 1 + l + sovPdpb(uint64(l))
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BootstrapClusterRsp) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellHeartbeatReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	n += 1 + l + sovPdpb(uint64(l))
	n += 1 + sovPdpb(uint64(m.Id))
	l = m.Cell.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovPdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CellHeartbeatRsp) Size() (n int) {
	var l int
	_ = l
	l = m.ChangePeer.Size()
	n += 1 + l + sovPdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPdpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPdpb(x uint64) (n int) {
	return sovPdpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChangePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &metapb.Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Leader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocIDRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocIDRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocIDRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsClusterBootstrapReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsClusterBootstrapReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsClusterBootstrapReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsClusterBootstrapRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsClusterBootstrapRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsClusterBootstrapRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapClusterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapClusterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapClusterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapClusterRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapClusterRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapClusterRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyBootstrapped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyBootstrapped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellHeartbeatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellHeartbeatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellHeartbeatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &metapb.Peer{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellHeartbeatRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellHeartbeatRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellHeartbeatRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChangePeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPdpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPdpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPdpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPdpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPdpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPdpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPdpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pdpb.proto", fileDescriptorPdpb) }

var fileDescriptorPdpb = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x4e, 0xdb, 0x30,
	0x14, 0x26, 0x25, 0xc0, 0x7a, 0xf8, 0xab, 0x0c, 0x4c, 0x5d, 0x26, 0x31, 0x94, 0x8b, 0x8d, 0x21,
	0xd1, 0x48, 0x9d, 0xb4, 0x5d, 0x30, 0x4d, 0x2a, 0x45, 0x62, 0xa0, 0x6d, 0x42, 0x65, 0x2f, 0xe0,
	0xc6, 0xa7, 0x25, 0x5a, 0x8a, 0x8d, 0xe3, 0x22, 0xf1, 0x12, 0xbb, 0x9c, 0xf6, 0x48, 0x5c, 0xee,
	0x09, 0xa6, 0x89, 0x27, 0x99, 0xec, 0x38, 0x21, 0xc9, 0xd2, 0x5d, 0xf4, 0x8a, 0xfa, 0x9c, 0xef,
	0xe7, 0x98, 0x7c, 0xc7, 0x00, 0x82, 0x89, 0x61, 0x47, 0x48, 0xae, 0x38, 0x71, 0xf5, 0x6f, 0xef,
	0x70, 0x1c, 0xa9, 0xab, 0xe9, 0xb0, 0x13, 0xf2, 0x49, 0x30, 0xe6, 0x63, 0x1e, 0x98, 0xe6, 0x70,
	0x3a, 0x32, 0x27, 0x73, 0x30, 0xbf, 0x52, 0x92, 0x77, 0x54, 0x80, 0x33, 0x44, 0x31, 0xa2, 0x43,
	0x19, 0x85, 0x01, 0xc6, 0x34, 0x51, 0x51, 0x88, 0x71, 0x1c, 0x88, 0x6f, 0xe3, 0x40, 0x0c, 0x83,
	0x09, 0x2a, 0x9a, 0xff, 0x49, 0xc9, 0x3e, 0x03, 0xe8, 0x5f, 0xd1, 0xeb, 0x31, 0x5e, 0x20, 0x4a,
	0xd2, 0x01, 0x57, 0xdd, 0x09, 0x6c, 0x3b, 0x7b, 0xce, 0xfe, 0x46, 0x77, 0xbb, 0x63, 0x46, 0xeb,
	0xf3, 0xeb, 0x51, 0x8a, 0xf9, 0x7a, 0x27, 0xf0, 0xd8, 0xbd, 0xff, 0xfd, 0x62, 0x61, 0x60, 0x70,
	0xe4, 0x25, 0xb8, 0x02, 0x51, 0xb6, 0x1b, 0x7b, 0xce, 0xfe, 0x6a, 0x77, 0xad, 0x63, 0xa5, 0xb5,
	0x96, 0xc1, 0x39, 0x03, 0xd3, 0xf7, 0x07, 0xb0, 0xfc, 0x09, 0x29, 0x43, 0x49, 0xb6, 0xa1, 0x11,
	0x31, 0xa3, 0xef, 0x5a, 0xa5, 0x46, 0xc4, 0x48, 0x1b, 0xdc, 0x6b, 0x3a, 0x41, 0xa3, 0xd3, 0xcc,
	0x1c, 0x74, 0x45, 0x77, 0x28, 0x63, 0xb2, 0xbd, 0x58, 0xec, 0xe8, 0x8a, 0x7f, 0x04, 0xcd, 0x54,
	0x73, 0x80, 0x37, 0x1a, 0x36, 0x92, 0x7c, 0x62, 0x84, 0x73, 0x98, 0xae, 0x58, 0xc3, 0x46, 0xd9,
	0xd0, 0x7f, 0x97, 0x93, 0x13, 0x41, 0x0e, 0x60, 0x39, 0x36, 0x07, 0x43, 0xd7, 0xf7, 0x30, 0xf7,
	0x4e, 0x01, 0x96, 0x64, 0x11, 0x7e, 0x0f, 0x36, 0x4f, 0x51, 0xf5, 0xe3, 0x69, 0xa2, 0x50, 0x9e,
	0x9d, 0xcc, 0xe3, 0xfd, 0xaa, 0x22, 0x91, 0x88, 0xfa, 0xff, 0x8a, 0xff, 0x1e, 0xa0, 0x17, 0xc7,
	0x3c, 0x9c, 0xcf, 0xc6, 0x7f, 0x64, 0xcf, 0x74, 0x38, 0x85, 0x9d, 0xb3, 0xc4, 0x4e, 0x72, 0xcc,
	0xb9, 0x4a, 0x94, 0xa4, 0x62, 0x1e, 0xb3, 0x37, 0xb5, 0x42, 0x89, 0x20, 0x1e, 0x2c, 0xdd, 0xd2,
	0x78, 0x9a, 0x46, 0xea, 0x89, 0x65, 0xa4, 0x25, 0xff, 0xa7, 0x03, 0x5b, 0x39, 0xd8, 0x92, 0xe7,
	0x30, 0x27, 0xaf, 0x61, 0x29, 0x51, 0x5c, 0xa2, 0x09, 0xc9, 0x6a, 0x77, 0x3d, 0x8b, 0xe1, 0xa5,
	0x2e, 0x66, 0x96, 0x06, 0xa1, 0x03, 0xab, 0x37, 0xa2, 0xed, 0x96, 0x03, 0xdb, 0xc7, 0x38, 0xce,
	0x8c, 0x74, 0xdf, 0xff, 0x5c, 0x33, 0x59, 0x22, 0xc8, 0x5b, 0xd8, 0xa2, 0xb1, 0x44, 0xca, 0xee,
	0xf2, 0xae, 0x40, 0x56, 0xba, 0x5b, 0x1d, 0xc0, 0xff, 0xe1, 0x40, 0x4b, 0x7b, 0x7c, 0x44, 0x2a,
	0xd5, 0x10, 0xa9, 0x9a, 0xe7, 0x9a, 0xd9, 0xec, 0x8b, 0xff, 0x9f, 0xbd, 0x10, 0x67, 0x77, 0xe6,
	0x5a, 0x66, 0x71, 0x3e, 0xaf, 0xce, 0x65, 0x2e, 0x09, 0x61, 0xfe, 0x24, 0xd8, 0x95, 0x68, 0xd9,
	0xa7, 0x20, 0xaf, 0x5b, 0xc7, 0x02, 0xf2, 0xe0, 0x10, 0x36, 0xca, 0x4f, 0x05, 0x59, 0x85, 0x95,
	0x1e, 0x63, 0x5f, 0x38, 0xc3, 0xd6, 0x02, 0xd9, 0x00, 0x18, 0xe0, 0x84, 0xdf, 0xa2, 0x39, 0x3b,
	0xdd, 0xef, 0x8b, 0xd0, 0xbc, 0x38, 0xb9, 0x44, 0x79, 0x1b, 0x85, 0x48, 0x02, 0x68, 0x9e, 0xa2,
	0xb2, 0x8f, 0xc4, 0x66, 0x71, 0x01, 0x07, 0x78, 0xe3, 0x95, 0x0b, 0x89, 0xf0, 0x17, 0x48, 0x00,
	0x2b, 0x36, 0xde, 0xc4, 0x0e, 0xf7, 0xb8, 0x2b, 0x5e, 0xa5, 0x62, 0x08, 0x1f, 0x60, 0xad, 0xb8,
	0x76, 0x64, 0x27, 0xc5, 0x54, 0xb6, 0xd9, 0xab, 0x2b, 0x1b, 0xfe, 0x05, 0x90, 0x7f, 0x23, 0x4e,
	0x9e, 0xa7, 0xf0, 0xda, 0x2d, 0xf2, 0x66, 0x37, 0x8d, 0xe2, 0x39, 0xb4, 0xaa, 0x21, 0x23, 0xcf,
	0x52, 0x4a, 0xcd, 0x5a, 0x78, 0xb3, 0x5a, 0x46, 0xab, 0x07, 0xeb, 0xa5, 0x0f, 0x49, 0x9e, 0xda,
	0x2f, 0x56, 0x49, 0x9d, 0x57, 0x5b, 0xd7, 0x12, 0xc7, 0x6b, 0xf7, 0x0f, 0xbb, 0xce, 0xaf, 0x87,
	0x5d, 0xe7, 0xcf, 0xc3, 0xae, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x40, 0x70, 0x3f, 0x84, 0x97,
	0x06, 0x00, 0x00,
}
